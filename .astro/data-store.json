[["Map",1,2,9,10,19,48,27,116],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.0","content-config-digest","01c8a6d71fa8579e","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://eembouz.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/noop\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,32,33],"histoire-du-design-graphique",{"id":11,"data":13,"body":28,"filePath":29,"digest":30,"deferredRender":31},{"title":14,"isDraft":15,"taxonomies":16,"thumbnail":22,"summary":23,"pubDate":24,"author":25},"Histoire du design graphique",false,[17,20],{"id":18,"collection":19},"architecture-design","taxonomies",{"id":21,"collection":19},"design","/new_thumbnail.png","Avant d’être un art de vendre, le design graphique a été un art de rassembler, de dominer, parfois de faire peur.",["Date","2025-07-01T00:00:00.000Z"],{"id":26,"collection":27},"emmanuelito","authors","\u003Cdiv class=\"blog-single\">\r\n\r\n\u003Cblockquote>\r\n  \u003Cp>\r\n    \u003Cem>\r\n      Avant d’être un art de vendre, le design graphique a été un art de\r\n      rassembler, de dominer, parfois de faire peur.\r\n    \u003C/em>\r\n    \u003Cbr />\r\n    **Des boucliers romains aux blasons médiévaux, des drapeaux révolutionnaires\r\n    aux insignes militaires du XXe siècle,** chaque symbole, chaque couleur,\r\n    chaque forme servait un message : \"Nous sommes unis\", \"Nous sommes\r\n    puissants\", \"Nous sommes différents\". Ces signes visuels portaient déjà les\r\n    fonctions que l’on attribue aujourd’hui au design graphique : identité,\r\n    message, stratégie.\r\n  \u003C/p>\r\n\u003C/blockquote>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  \u003Cstrong>\r\n    Aujourd’hui, je vous propose un voyage à travers l’histoire du design\r\n    graphique.\r\n  \u003C/strong>\r\n  Véritable socle de toute activité visuelle et de toute expérience commerciale,\r\n  il sert autant à renforcer l’image de marque d’une entité ou d’une collectivité\r\n  sociale qu’à orienter notre manière de percevoir, de classer et de juger ce qui\r\n  nous entoure.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Dans cet article, nous découvrirons quelques mouvements artistiques majeurs\r\n  qui ont non seulement façonné l’histoire du design graphique, mais qui\r\n  continuent d’inspirer les créateurs d’aujourd’hui.\r\n\u003C/p>\r\n\r\n## Arts and Crafts\r\n\r\n\u003Cbr />\r\n\u003Cimg\r\n  src=\"/images/arts-craft-movement-william-morris-13.jpg\"\r\n  alt=\"Arts & Crafts\"\r\n/>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le \u003Cstrong>mouvement Arts & Crafts\u003C/strong>, né dans les années 1860 au\r\n  Royaume-Uni, a été une\r\n  \u003Cstrong>\r\n    réaction directe contre la mécanisation et la production de masse\r\n  \u003C/strong>\r\n  apportées par la Révolution industrielle.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Son objectif était de \u003Cstrong>réhabiliter le travail artisanal\u003C/strong>, la\r\n  qualité des matériaux, la beauté de l’objet fait main, et l’unité entre\r\n  l’artiste, l’artisan et l’objet.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Aujourd'hui, ce courant se reflète dans le minimalisme, le travail fait main\r\n  et maison, ainsi que dans l'utilisation de matériaux locaux, écologiques et\r\n  durables.\r\n\u003C/p>\r\n\r\n## Art Nouveau\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  L’\u003Cstrong>Art Nouveau\u003C/strong> est un mouvement artistique né à la fin du XIXe\r\n  siècle, dans la continuité d’\u003Cstrong>Arts & Crafts\u003C/strong>, et partageant une\r\n  même volonté de rupture avec l’industrialisation et la reproduction académique\r\n  des styles anciens.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Il se caractérise par l’usage de \u003Cstrong>motifs floraux\u003C/strong>,\r\n  \u003Cstrong>formes organiques\u003C/strong> et \u003Cstrong>lignes courbes\u003C/strong>, qui\r\n  traduisent une recherche d’harmonie entre l’homme, la nature et l’art. Ce\r\n  style visait à \u003Cstrong>intégrer l’art dans le quotidien\u003C/strong>, en rendant\r\n  beaux et expressifs les objets les plus utilitaires.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Dans l’imaginaire collectif, l’Art Nouveau incarne\r\n  \u003Cstrong>l’élan de modernité\u003C/strong> et\r\n  \u003Cstrong>l’épanouissement d’un homme nouveau\u003C/strong>, à l’aube du XXe siècle.\r\n\u003C/p>\r\n\r\n\u003Cbr />\r\n\u003Cimg\r\n  src=\"/images/Tile_panel_flowers_Louvre_OA3919-2-297.jpg\"\r\n  alt=\"Art Nouveau 1\"\r\n/>\r\n\u003Cimg src=\"/images/Art_Nouveau_composition.jpg\" alt=\"Art Nouveau 2\" />\r\n\r\n## Constructivisme russe\r\n\r\n\u003Cbr />\r\n\u003Cimg\r\n  src=\"/images/Alexander-Rodchenko-Books-1924.-Image-via-analogue76.com_.webp\"\r\n  alt=\"Constructivisme russe\"\r\n/>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le \u003Cstrong>constructivisme russe\u003C/strong> est un mouvement artistique né dans\r\n  les années 1910-1920 en Russie, dans le contexte tumultueux de la\r\n  \u003Cstrong>Révolution d’Octobre\u003C/strong>. Contrairement aux courants précédents, il\r\n  rejette toute forme de représentation figurative ou décorative, au profit de \u003Cstrong>\r\n    formes géométriques strictes\r\n  \u003C/strong>, d’une\r\n  \u003Cstrong>structure claire\u003C/strong>, et d’une esthétique\r\n  \u003Cstrong>fonctionnelle\u003C/strong>.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Ce mouvement considère l’œuvre d’art comme un\r\n  \u003Cstrong>\"objet construit\"\u003C/strong>, une sorte de squelette en trois dimensions\r\n  au service de la société. Il prône un art \u003Cstrong>utile\u003C/strong>, orienté vers\r\n  l’\u003Cstrong>industrie\u003C/strong>, l’\u003Cstrong>architecture\u003C/strong>, la\r\n  \u003Cstrong>propagande\u003C/strong> et les \u003Cstrong>médias de masse\u003C/strong>.\r\n\u003C/p>\r\n\r\n### Héritage contemporain : le design brutaliste sur le web\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  L’esthétique du \u003Cstrong>constructivisme russe\u003C/strong> a profondément\r\n  influencé ce qu’on appelle aujourd’hui le \u003Cstrong>design brutaliste\u003C/strong>,\r\n  particulièrement visible sur certains sites web contemporains (mon site).\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Ce style brutaliste, tout comme le constructivisme,\r\n  \u003Cstrong>rejette les conventions esthétiques dominantes\u003C/strong>, et privilégie\r\n  des choix \u003Cstrong>radicaux, fonctionnels et sans fioritures\u003C/strong> :\r\n\u003C/p>\r\n\r\n\u003Cul>\r\n  \u003Cli>typographies très marquées,\u003C/li>\r\n  \u003Cli>blocs rigides,\u003C/li>\r\n  \u003Cli>couleurs franches,\u003C/li>\r\n  \u003Cli>absence de hiérarchisation \"classique\" de l’information,\u003C/li>\r\n  \u003Cli>et navigation parfois délibérément déroutante.\u003C/li>\r\n\u003C/ul>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  \u003Cstrong>Objectif\u003C/strong> : choquer, interpeller, s’affranchir du \"web lisse\"\r\n  pour proposer une \u003Cstrong>expérience brute et assumée\u003C/strong>, presque\r\n  militante.\r\n\u003C/p>\r\n\r\n## Bauhaus\r\n\r\n\u003Cimg src=\"/images/616zajxgtRL.jpg\" alt=\"Bauhaus\" />\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le \u003Cstrong>Bauhaus\u003C/strong> est un mouvement artistique et une école de design\r\n  fondée en \u003Cstrong>1919 à Weimar, en Allemagne\u003C/strong>, par l’architecte\r\n  \u003Cstrong>Walter Gropius\u003C/strong>. Il est souvent considéré comme\r\n  \u003Cstrong>le socle du design moderne\u003C/strong>, à la croisée de l’\r\n  \u003Cstrong>art\u003C/strong>, de l’\u003Cstrong>architecture\u003C/strong> et de l’\r\n  \u003Cstrong>industrie\u003C/strong>.\r\n\u003C/p>\r\n\r\n### Objectif\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  L’idée principale du Bauhaus était de\r\n  \u003Cstrong>réconcilier l’art et l’artisanat\u003C/strong> dans une ère dominée par l’industrialisation.\r\n  Au lieu d’opposer les deux, le Bauhaus cherchait à les unifier pour créer des objets\r\n  à la fois \u003Cstrong>fonctionnels\u003C/strong>,\u003Cstrong>esthétiques\u003C/strong>, et\r\n  \u003Cstrong>accessibles au plus grand nombre\u003C/strong>.\r\n\u003C/p>\r\n\r\n\u003Cblockquote>\r\n  \"La forme suit la fonction\" devient l’un de leurs principes-clés.\r\n\u003C/blockquote>\r\n\r\n### Caractéristiques\r\n\r\n\u003Cul>\r\n  \u003Cli>\r\n    Formes \u003Cstrong>géométriques simples\u003C/strong>\r\n  \u003C/li>\r\n  \u003Cli>\r\n    Couleurs \u003Cstrong>primaires\u003C/strong>\r\n  \u003C/li>\r\n  \u003Cli>Absence de fioritures\u003C/li>\r\n  \u003Cli>\r\n    Priorité à \u003Cstrong>l’usage\u003C/strong> plutôt qu’à la décoration\r\n  \u003C/li>\r\n  \u003Cli>\r\n    Conception d’objets du \u003Cstrong>quotidien\u003C/strong> (meubles, affiches,\r\n    bâtiments)\r\n  \u003C/li>\r\n\u003C/ul>\r\n\r\n### Héritage\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le Bauhaus a influencé\r\n  \u003Cstrong>le graphisme, l’architecture, la typographie\u003C/strong> et même\r\n  \u003Cstrong>l’urbanisme\u003C/strong>. Aujourd’hui, on retrouve son esprit dans des\r\n  interfaces minimalistes, des polices géométriques, des logos simples, ou\r\n  encore dans les meubles IKEA.\r\n\u003C/p>\r\n\r\n## Style international (Swiss Style)\r\n\r\n\u003Cbr />\r\n\u003Cimg src=\"/images/Dessau_bauhaus_04.jpg\" alt=\"Style international\" />\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le \u003Cstrong>Style international\u003C/strong>, aussi appelé\r\n  \u003Cstrong>Swiss Style\u003C/strong>, est un courant graphique né en Suisse dans les années\r\n  1950. Il hérite des principes du \u003Cstrong>Bauhaus\u003C/strong> et se distingue par une\r\n  approche\r\n  \u003Cstrong>rigoureuse, fonctionnelle et minimaliste\u003C/strong> du design.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Ce style repose sur l’usage de \u003Cstrong>grilles\u003C/strong>, de\r\n  \u003Cstrong>typographies sans empattement\u003C/strong> (comme\r\n  \u003Cstrong>Helvetica\u003C/strong>) et d’une\r\n  \u003Cstrong>hiérarchie visuelle claire\u003C/strong>. L’objectif est de transmettre l’information\r\n  de manière \u003Cstrong>neutre\u003C/strong>, \u003Cstrong>efficace\u003C/strong> et\r\n  \u003Cstrong>lisible\u003C/strong>, sans ornement superflu.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Ce courant a profondément influencé le design éditorial, l’affiche moderne, la\r\n  signalétique, et plus tard, le \u003Cstrong>webdesign\u003C/strong> et les\r\n  \u003Cstrong>interfaces numériques\u003C/strong>.\r\n\u003C/p>\r\n\r\n---\r\n\r\n### ✅ Éléments clés :\r\n\r\n\u003Cul>\r\n  \u003Cli>Grille de mise en page\u003C/li>\r\n  \u003Cli>Typographie sans-serif (Helvetica, Univers…)\u003C/li>\r\n  \u003Cli>Simplicité, clarté, hiérarchie\u003C/li>\r\n  \u003Cli>Formes géométriques\u003C/li>\r\n  \u003Cli>Équilibre entre texte et image\u003C/li>\r\n\u003C/ul>\r\n\r\n## Pop Art\r\n\r\n\u003Cbr />\r\n\u003Cimg src=\"/images/girl-pop-art-canvas-695502_1600x.webp\" alt=\"Pop Art\" />\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le \u003Cstrong>Pop Art\u003C/strong> se reconnaît par ses\r\n  \u003Cstrong>couleurs vives\u003C/strong>, ses \u003Cstrong>formes simples\u003C/strong> et l’usage\r\n  d’\u003Cstrong>images populaires\u003C/strong> comme celles de la pub, des emballages ou\r\n  des BD.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Il casse les codes en utilisant des éléments du quotidien pour créer un art\r\n  accessible et percutant.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Aujourd’hui, on retrouve son influence dans le\r\n  \u003Cstrong>design graphique\u003C/strong>, la \u003Cstrong>publicité\u003C/strong>, ou encore les\r\n  \u003Cstrong>réseaux sociaux\u003C/strong>, où l’image forte et directe est au centre de\r\n  la communication.\r\n\u003C/p>\r\n\r\n## Postmodernisme\r\n\r\n\u003Cbr />\r\n\u003Cimg\r\n  src=\"/images/360_F_973913124_ExyhYfl8rIzVqbwKjT7CH3N9fnRzOJUA.jpg\"\r\n  alt=\"Postmodernisme\"\r\n/>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Le \u003Cstrong>postmodernisme\u003C/strong> apparaît vers les années\r\n  \u003Cstrong>1970\u003C/strong>, en réaction au modernisme et à ses formes trop strictes,\r\n  froides et parfois jugées trop sérieuses.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Il casse les règles : \u003Cstrong>mélange les styles\u003C/strong>,\r\n  \u003Cstrong>joue avec les couleurs\u003C/strong>, \u003Cstrong>reprend le passé\u003C/strong>\r\n  tout en y ajoutant une touche d’humour ou de décalage. C’est un courant qui refuse\r\n  de suivre une seule voie.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  En architecture, design ou graphisme, le postmodernisme remet en cause l’idée\r\n  de “bon goût” et valorise \u003Cstrong>la liberté d’expression\u003C/strong>, même si\r\n  cela choque ou surprend.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Aujourd’hui, on en voit encore les traces dans des créations\r\n  \u003Cstrong>originales, colorées et inattendues\u003C/strong>, qui mélangent époques et\r\n  influences.\r\n\u003C/p>\r\n\r\n## En résumé\r\n\r\n- 1. **Arts & Crafts (1860s)** :\r\n     Retour au fait main, réaction contre l’industrialisation.\r\n\r\n- 2. **Art Nouveau (fin XIXe – début XXe)** :\r\n     Lignes courbes, nature, harmonie\r\n\r\n- 3. **Constructivisme russe (1910s–1920s)** :\r\n     Formes géométriques, propagande visuelle.\r\n\r\n- 4. **Bauhaus (1919–1933)** :\r\n     Fonctionnalité, simplicité, union art et industrie.\r\n\r\n- 5. **Style international (1920s–1980s)** :\r\n     Architecture moderne, acier, verre, épure.\r\n\r\n- 6. **Style typographique suisse / Style suisse (années 1950)** :\r\n     Grille, typographie claire,\r\n     \u003Cbr />\r\n     \u003Cbr />\r\n     Helvetica, influence majeure en graphisme.\r\n\r\n- 7. **Pop Art (1950s–1970s)** :\r\n     Couleurs vives, culture de masse, Andy Warhol.\r\n\r\n- 8. **Postmodernisme (1970s–1990s)** :\r\n     Rupture avec le modernisme, mélange des styles.\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  \u003Cstrong>\r\n    Du travail artisanal aux créations numériques, le design graphique a sans\r\n    cesse évolué pour refléter son époque.\r\n  \u003C/strong>\r\n  Chaque mouvement raconte une histoire, révèle une vision du monde, et influence\r\n  encore aujourd’hui notre manière de communiquer. Comprendre cette histoire nous\r\n  aide à mieux saisir les défis actuels et à imaginer l’avenir du design, toujours\r\n  en quête d’innovation et de sens.\r\n\u003C/p>\r\n\r\n\u003C/div>","src/data/blog/histoire-du-design-graphique.mdx","d12774dea64c702c",true,"qu-est-ce-que-design-pattern",{"id":32,"data":34,"body":45,"filePath":46,"digest":47,"deferredRender":31},{"title":35,"isDraft":15,"taxonomies":36,"thumbnail":41,"summary":42,"pubDate":43,"author":44},"Qu’est-ce qu’un design pattern ?",[37,39],{"id":38,"collection":19},"bonnes-pratiques-clean-code",{"id":40,"collection":19},"programmation","/design_pattern.png","Les design patterns sont des solutions éprouvées et validées par les pionniers de l’informatique. Ils ont été conçus pour structurer et organiser le code de manière claire, lisible et efficace.",["Date","2025-07-12T00:00:00.000Z"],{"id":26,"collection":27},"import BlockDesignPattern from \"../../components/blog/pattern/BlockDesignPattern.tsx\";\r\nimport DisplayList from \"../../components/blog/pattern/DisplayList.tsx\";\r\n\r\n\u003Cdiv class=\"blog-single\">\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Les **design patterns** sont des solutions éprouvées et validées par les\r\n  pionniers de l'informatique. Ils ont été conçus pour **structurer et organiser\r\n  le code** de manière claire, lisible et efficace. L’idée est de proposer des\r\n  **modèles génériques et réutilisables**, qui facilitent la **scalabilité** et\r\n  la **maintenance** des systèmes logiciels, tout en réduisant les erreurs\r\n  courantes.\r\n\u003C/p>\r\n\r\n## histoire\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Les **design patterns** sont nés de la volonté de produire du code\r\n  **scalable** et maintenable, même si cela signifiait, au départ, **sacrifier\r\n  un peu de confort de développement**. Lorsque les équipes techniques\r\n  remarquent qu’une même structure ou solution est **répétée plusieurs fois dans\r\n  le code** pour résoudre un même type de problème, elles finissent par lui\r\n  donner un **nom commun**. C’est ainsi qu’est née l’idée des **design\r\n  patterns** : des solutions **nommées, génériques et réutilisables**,\r\n  documentées pour faciliter la collaboration et la compréhension dans les\r\n  projets logiciels.\r\n\u003C/p>\r\n\r\n\u003Cblockquote>\r\n  \u003Cp>\r\n    \u003Cem>\r\n      historiquement, Le concept de design pattern est inspiré du travail de\r\n      **Christopher Alexander** dans l’architecture, puis formalisé en\r\n      informatique par les **\"Gang of Four\"** en 1994. Ces patterns sont devenus\r\n      une base incontournable pour structurer le code, éviter les redondances,\r\n      et faciliter la maintenance des applications à grande échelle.\r\n    \u003C/em>\r\n  \u003C/p>\r\n\u003C/blockquote>\r\n\r\n## Pourquoi devrais je apprendre des modèles ?\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Dans la majorité des cas, vous avez probablement déjà **utilisé des design\r\n  patterns sans le savoir**. C’est exactement ce qui distingue souvent un\r\n  développeur junior d’un développeur senior : la capacité à reconnaître,\r\n  comprendre et appliquer consciemment ces structures. Par exemple, le **code\r\n  source des Framework** (comme React, Laravel, AdonisJS, etc.) en est truffé.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Une fois maîtrisés, les **design patterns** deviennent une véritable **boîte à\r\n  outils** pour résoudre efficacement des problèmes courants en développement.\r\n  Ils vous aideront à **penser autrement**, avec plus de structure et de recul.\r\n  Avec le temps, cette manière de réfléchir deviendra presque naturelle.\r\n\u003C/p>\r\n\r\n## Classifications et Rôle:\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Cette liste n’est pas exhaustive et ne couvre pas l’ensemble des design\r\n  patterns que vous pourriez rencontrer. Nous allons nous concentrer sur un type\r\n  particulier de modèles : les **modèles architecturaux**.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Ces modèles peuvent être implémentés dans **n’importe quel langage de\r\n  programmation** et sont appelés **modèles universels** ou **patterns de haut\r\n  niveau**. Ils s’opposent aux **idiomes**, qui sont des solutions plus\r\n  spécifiques, propres à un langage particulier et souvent de bas niveau.\r\n\u003C/p>\r\n\r\n\u003Cblockquote>\r\n  \u003Cp>\r\n    - Les **patterns architecturaux** définissent la structure globale d’une\r\n    application ou d’un système (ex. MVC, Client-Serveur, Microservices).\r\n  \u003C/p>\r\n  \u003Cp>\r\n    - Les **patterns de conception** (design patterns au sens plus classique)\r\n    concernent l’organisation du code à l’intérieur des composants (ex.\r\n    Singleton, Factory, Observer).\r\n  \u003C/p>\r\n  \u003Cp>\r\n    - Les **idiomes** sont des constructions propres à un langage, qui\r\n    exploitent ses spécificités syntaxiques et sémantiques.\r\n  \u003C/p>\r\n\u003C/blockquote>\r\n\r\n\u003CDisplayList client:only />\r\n\r\n---\r\n\r\n## Cas concret : un store Zustand refactoré selon les Design Patterns\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Pour illustrer concrètement l’intérêt des design patterns, prenons un\r\n  **exemple réel** rencontré lors de la construction de mon application.\r\n  J’utilise Zustand comme **solution de gestion d’état** globale. C’est un outil\r\n  simple, mais très puissant, qui permet de construire un store à la volée.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Cependant, en avançant dans le développement, le store devient **complexe,\r\n  difficile à tester ou à maintenir**, et certaines logiques sont dupliquées.\r\n  C’est exactement le genre de situation où **les design patterns prennent tout\r\n  leur sens**.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Dans cette section, nous allons **refactorer ce store pas à pas**, en\r\n  appliquant différents design patterns. Chaque refactor sera **associé à un\r\n  pattern précis** : Singleton, Factory, Observer, etc. Cela permettra de\r\n  comprendre **à la fois la théorie** derrière chaque modèle **et son\r\n  application pratique** dans un contexte moderne (React + Zustand).\r\n\u003C/p>\r\n\r\n## Le code de base\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Avant de commencer le refactor, voici **le store Zustand tel qu’il existait\r\n  initialement** dans mon projet. Il est fonctionnel, et implémentait\r\n  certainspattern partiellement\r\n\u003C/p>\r\n\r\n- Factory Method (partiellement)\r\n- Strategy\r\n\r\n```ts\r\nimport { UnAuthenticatedError } from \"@helpers/website\";\r\n\r\nimport {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  type PropsWithChildren,\r\n} from \"react\";\r\n\r\nimport { create, useStore as useZustandStore } from \"zustand\";\r\n\r\nimport { combine, persist } from \"zustand/middleware\";\r\n\r\nimport type { Account } from \"./hooks/useAuth.ts\";\r\n\r\nimport type {\r\n  AccessLevels,\r\n  Courses,\r\n  Difficulties,\r\n  Statuses,\r\n} from \"@api/website/types\";\r\n\r\nexport type ResourceMap = {\r\n  accessLevel: AccessLevels;\r\n\r\n  difficulties: Difficulties;\r\n\r\n  statuses: Statuses;\r\n};\r\n\r\ntype State = {\r\n  account: undefined | null | Record\u003Cstring, any>;\r\n\r\n  organization: Record\u003Cstring, any>;\r\n\r\n  accesslevels: AccessLevels[];\r\n\r\n  difficulties: Difficulties[];\r\n\r\n  statuses: Statuses[];\r\n\r\n  courses: Courses[];\r\n};\r\n\r\nfunction getStateKey\u003CT extends keyof ResourceMap>(\r\n  type: T\r\n): keyof Omit\u003CState, \"account\" | \"organization\" | \"courses\"> {\r\n  switch (type) {\r\n    case \"accessLevel\":\r\n      return \"accesslevels\";\r\n\r\n    case \"difficulties\":\r\n      return \"difficulties\";\r\n\r\n    case \"statuses\":\r\n      return \"statuses\";\r\n\r\n    default:\r\n      throw new Error(\"Courses resource type \" + type);\r\n  }\r\n}\r\n\r\nconst createStore = () =>\r\n  create(\r\n    persist(\r\n      combine(\r\n        {\r\n          account: undefined as undefined | null | Account,\r\n\r\n          organization: {},\r\n\r\n          courses: [],\r\n\r\n          accesslevels: [],\r\n\r\n          difficulties: [],\r\n\r\n          statuses: [],\r\n        } as State,\r\n\r\n        (set) => ({\r\n          setResources: function \u003CT extends keyof ResourceMap>(\r\n            type: T,\r\n\r\n            data: ResourceMap[T][]\r\n          ) {\r\n            const key = getStateKey(type);\r\n\r\n            return set({ [key]: data });\r\n          },\r\n\r\n          addResource: function \u003CT extends keyof ResourceMap>(\r\n            type: T,\r\n\r\n            newData: ResourceMap[T]\r\n          ) {\r\n            const key = getStateKey(type);\r\n\r\n            return set((state) => ({\r\n              [key]: [...state[key], newData],\r\n            }));\r\n          },\r\n\r\n          updateResource: function \u003CT extends keyof ResourceMap>(\r\n            type: T,\r\n\r\n            newData: ResourceMap[T]\r\n          ) {\r\n            const key = getStateKey(type);\r\n\r\n            return set((state) => ({\r\n              [key]: state[key].map((item) =>\r\n                item.id === newData.id ? { ...item, ...newData } : item\r\n              ),\r\n            }));\r\n          },\r\n\r\n          deleteResource: function \u003CT extends keyof ResourceMap>(\r\n            type: T,\r\n\r\n            id: number\r\n          ) {\r\n            const key = getStateKey(type);\r\n\r\n            return set((state) => ({\r\n              [key]: state[key].filter((item) => item.id !== id),\r\n            }));\r\n          },\r\n\r\n          setCourses: (courses: Courses[]) => {\r\n            set({ courses });\r\n          },\r\n\r\n          addCourse: (course: Courses) => {\r\n            set((state) => ({\r\n              courses: [...state.courses, course],\r\n            }));\r\n          },\r\n\r\n          updateOrganization: (newDate: Record\u003Cstring, any>) =>\r\n            set({ organization: newDate }),\r\n\r\n          updateAccount: (account: Account | null) => set({ account }),\r\n        })\r\n      ),\r\n\r\n      {\r\n        name: \"account\",\r\n      }\r\n    )\r\n  );\r\n\r\ntype Store = ReturnType\u003Ctypeof createStore>;\r\n\r\ntype StoreState = Store extends {\r\n  getState: () => infer T;\r\n}\r\n  ? T\r\n  : never;\r\n\r\nconst StoreContext = createContext\u003C{ store?: Store }>({});\r\n\r\nexport function StoreProvider({ children }: PropsWithChildren) {\r\n  const store = useMemo(() => createStore(), []);\r\n\r\n  return (\r\n    \u003CStoreContext.Provider value={{ store: store }}>\r\n            {children}   {\" \"}\r\n    \u003C/StoreContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useStore\u003CT>(selector: (state: StoreState) => T) {\r\n  const store = useContext(StoreContext).store;\r\n\r\n  if (!store) {\r\n    throw new Error(\"A context need to be provider to use the store\");\r\n  }\r\n\r\n  return useZustandStore(store, selector);\r\n}\r\n\r\nexport type InferResourceType\u003CT> = T extends keyof ResourceMap\r\n  ? ResourceMap[T]\r\n  : never;\r\n\r\nexport function useResource\u003CT extends keyof ResourceMap>(type: T) {\r\n  const key = getStateKey(type);\r\n\r\n  const list = useStore((state) => state[key]) as InferResourceType\u003CT>[];\r\n\r\n  const setResources = useStore((state) => state.setResources);\r\n\r\n  const addResource = useStore((state) => state.addResource);\r\n\r\n  const updateResource = useStore((state) => state.updateResource);\r\n\r\n  const deleteResource = useStore((state) => state.deleteResource);\r\n\r\n  return {\r\n    list,\r\n\r\n    set: (data: InferResourceType\u003CT>[]) => setResources(type, data),\r\n\r\n    add: (data: InferResourceType\u003CT>) => addResource(type, data),\r\n\r\n    update: (data: InferResourceType\u003CT>) => updateResource(type, data),\r\n\r\n    delete: (id: number) => deleteResource(type, id),\r\n  };\r\n}\r\n\r\n// ACCESS_LEVELS\r\n\r\nexport function useAccessLevels() {\r\n  return useResource(\"accessLevel\");\r\n}\r\n\r\n// DIFFICULTIES\r\n\r\nexport function useDifficulties() {\r\n  return useResource(\"difficulties\");\r\n}\r\n\r\n// STATUSES\r\n\r\nexport function useStatuses() {\r\n  return useResource(\"statuses\");\r\n}\r\n\r\n// COURSES\r\n\r\nexport function useCourses() {\r\n  const list = useStore((state) => state.courses);\r\n\r\n  const setCourses = useStore((state) => state.setCourses);\r\n\r\n  const addCourses = useStore((state) => state.addCourse);\r\n\r\n  console.log(list);\r\n\r\n  return {\r\n    list,\r\n\r\n    set: (data: Courses[]) => setCourses(data),\r\n\r\n    add: (data: Courses) => addCourses(data),\r\n  };\r\n}\r\n\r\n// ORGANISATION\r\n\r\nexport function useOrganization() {\r\n  return useStore((state) => state.organization);\r\n}\r\n\r\nexport function useUpdateOrganization() {\r\n  return useStore((state) => state.updateOrganization);\r\n}\r\n\r\nexport function useUpdateAccount() {\r\n  return useStore((state) => state.updateAccount);\r\n}\r\n\r\nexport function useIsAuth() {\r\n  const account = useStore((state) => state.account);\r\n\r\n  if (!account) {\r\n    throw new UnAuthenticatedError();\r\n  }\r\n\r\n  return {\r\n    ...account,\r\n  };\r\n}\r\n\r\nexport function useAccount() {\r\n  const account = useStore((state) => state.account);\r\n\r\n  return {\r\n    ...account,\r\n  };\r\n}\r\n```\r\n\r\n\u003Cbr />\r\n### Objectifs de la version refactorée\r\n\r\n- Séparer les responsabilités.\r\n- Appliquer des patterns classiques.\r\n- Garder une API propre et extensible.\r\n\r\n## Singleton:\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Un singleton s'assure d'avoir qu'une seul instance d'un object (de préférence\r\n  une class) ne soit initialisé, offrant ainsi un seul point global\r\n  d'initialisation. Dans notre situation nous somme en javascript ou chaque\r\n  object et module est unique dans son contexte d'exécution.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\"> — **Singleton Pattern**\u003C/p>\r\n\u003Cbr />\r\n\r\n```ts\r\nimport { create } from \"zustand\";\r\nimport { combine, persist } from \"zustand/middleware\";\r\nimport type { State, Store, ResourceKey, InferResourceType } from \"./types\";\r\nimport { getStateKey } from \"./factory\";\r\n\r\nlet storeInstance: Store | undefined;\r\n\r\nexport const createStore = (): Store => {\r\n  if (storeInstance) return storeInstance;\r\n\r\n  storeInstance = create(\r\n    persist(\r\n      combine(\r\n        {\r\n          account: undefined,\r\n          organization: {},\r\n          courses: [],\r\n          accesslevels: [],\r\n          difficulties: [],\r\n          statuses: [],\r\n        } as State,\r\n        (set) => ({\r\n          updateAccount: (account) => set({ account }),\r\n          updateOrganization: (org) => set({ organization: org }),\r\n\r\n          setResources: \u003CT extends ResourceKey>(\r\n            type: T,\r\n            data: InferResourceType\u003CT>[]\r\n          ) => set({ [getStateKey(type)]: data }),\r\n\r\n          addResource: \u003CT extends ResourceKey>(\r\n            type: T,\r\n            item: InferResourceType\u003CT>\r\n          ) =>\r\n            set((state) => ({\r\n              [getStateKey(type)]: [...state[getStateKey(type)], item],\r\n            })),\r\n\r\n          updateResource: \u003CT extends ResourceKey>(\r\n            type: T,\r\n            item: InferResourceType\u003CT>\r\n          ) =>\r\n            set((state) => ({\r\n              [getStateKey(type)]: state[getStateKey(type)].map((i) =>\r\n                i.id === item.id ? { ...i, ...item } : i\r\n              ),\r\n            })),\r\n\r\n          deleteResource: \u003CT extends ResourceKey>(type: T, id: number) =>\r\n            set((state) => ({\r\n              [getStateKey(type)]: state[getStateKey(type)].filter(\r\n                (i) => i.id !== id\r\n              ),\r\n            })),\r\n        })\r\n      ),\r\n      { name: \"account\" }\r\n    )\r\n  );\r\n\r\n  return storeInstance;\r\n};\r\n```\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Ici on assure qu’un seul store Zustand existe dans l’app, ce qui est important\r\n  pour éviter les incohérences ou re-rendu inutile dans React `createStore()`\r\n  dans le contexte React.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  je ne reviendrais pas sur l'utilisation de Zustand, dans un prochain article.\r\n  En bref :\r\n\u003C/p>\r\n\r\n- **Combine** : est un middleware qui permet de séparer le state et les actions.\r\n- **Persist** : est un middleware qui permet de faire de la persistance avec le local Storage.\r\n\r\n## factory\r\n\r\n\u003Cp class=\"blog-single__paragraph\">— **Factory Pattern pour les clés**\u003C/p>\r\n\u003Cbr />\r\n\r\n```ts\r\nexport const getStateKey = \u003CT extends ResourceKey>(type: T): keyof State => {\r\n  const map: Record\u003CResourceKey, keyof State> = {\r\n    accessLevel: \"accesslevels\",\r\n    difficulties: \"difficulties\",\r\n    statuses: \"statuses\",\r\n  };\r\n  const key = map[type];\r\n  if (!key) throw new Error(`Unknown resource type: ${type}`);\r\n  return key;\r\n};\r\n```\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  On **abstrait la logique** de mappage `\"accessLevel\"` → `\"accesslevels\"` dans\r\n  un objet **déclaratif**, au lieu d’un `switch`.\r\n\u003C/p>\r\n\r\n## Facade\r\n\r\n\u003Cp class=\"blog-single__paragraph\">— **Facade Pattern**\u003C/p>\r\n\r\n```ts\r\nexport const useAccount = () => {\r\n  const account = useStore((s) => s.account);\r\n  return { ...account };\r\n};\r\n```\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  On caches la complexité du store et exposes une API simple.\r\n\u003C/p>\r\n\r\n\u003Chr />\r\n\r\n## Illustrations en pseudo-code\r\n\r\n\u003Cblockquote>\r\n  \u003Cp>\r\n    Bien que cet article ait pour objectif de fournir une **implémentation\r\n    concrète** des design patterns dans un contexte réel (React + Zustand),\r\n    certains modèles comme **Singleton** ou **Factory Method** s’intègrent\r\n    naturellement dans l’architecture de mon store.\r\n    \u003Cbr />\r\n    En revanche, d’autres modèles comme **Builder**, **Strategy** ou\r\n    **Decorator** sont plus **conceptuels** dans ce contexte. Ils seront donc\r\n    illustrés de manière plus **générique en pseudo-code** pour faciliter leur\r\n    compréhension.\r\n    \u003Cbr />\r\n    Ces exemples ne sont **pas destinés à être copiés tels quels** dans un\r\n    projet Zustand ou React, mais plutôt à vous aider à **saisir l’idée\r\n    générale** derrière chaque pattern.\r\n    \u003Cbr />\r\n    Vous verrez ensuite comment **adapter ces concepts** dans un projet réel si\r\n    nécessaire.\r\n  \u003C/p>\r\n\u003C/blockquote>\r\n\r\n### Builder (construire un objet étape par étape)\r\n\r\n```ts\r\nclass CourseBuilder {\r\n  name = \"\";\r\n  color = \"\";\r\n\r\n  setName(name: string) {\r\n    this.name = name;\r\n    return this;\r\n  }\r\n\r\n  setColor(color: string) {\r\n    this.color = color;\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    return { name: this.name, color: this.color };\r\n  }\r\n}\r\n\r\nconst course = new CourseBuilder().setName(\"React\").setColor(\"blue\").build();\r\n```\r\n\r\n\u003Cbr />\r\n\u003Cbr />\r\n### Strategy (changer de comportement dynamiquement)\r\n\r\n```ts\r\nclass ExportStrategy {\r\n  execute(data) {\r\n    throw \"Not implemented\";\r\n  }\r\n}\r\n\r\nclass JsonExport extends ExportStrategy {\r\n  execute(data) {\r\n    return JSON.stringify(data);\r\n  }\r\n}\r\n\r\nclass CsvExport extends ExportStrategy {\r\n  execute(data) {\r\n    return data.map((row) => row.join(\",\")).join(\"\\n\");\r\n  }\r\n}\r\n\r\nfunction exportData(data, strategy: ExportStrategy) {\r\n  return strategy.execute(data);\r\n}\r\n```\r\n\r\n\u003Cbr />\r\n\u003Cbr />\r\n### Decorator (enrichir un comportement sans toucher au code source)\r\n\r\n```ts\r\nfunction withLogger(fn) {\r\n  return function (...args) {\r\n    console.log(\"Appel de\", fn.name, \"avec\", args);\r\n    return fn(...args);\r\n  };\r\n}\r\n\r\nfunction saveCourse(course) {}\r\n\r\nconst loggedSaveCourse = withLogger(saveCourse);\r\n\r\nloggedSaveCourse({ name: \"JS\", color: \"yellow\" });\r\n```\r\n\r\n\u003Chr />\r\n\r\n## Conclusion\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Les **design patterns** sont des outils puissants, à condition d’être utilisés\r\n  dans le **bon contexte** et de manière réfléchie. On peut y penser **en\r\n  amont**, lors de la conception, si l’on est à l’aise, ou bien **les introduire\r\n  progressivement** en refactorant le projet au fil du temps.\r\n  \u003Cbr />\r\n  Ils permettent d’**éviter la répétition**, de **faire évoluer** le code plus\r\n  facilement, de **l’améliorer** et surtout de **mieux le tester**.\r\n\u003C/p>\r\n\r\n\u003Cp class=\"blog-single__paragraph\">\r\n  Dans cet article, nous avons vu comment **certains modèles** comme le\r\n  **Singleton**, la **Factory Method**, ou la **Facade** peuvent s’appliquer\r\n  **directement** dans une architecture moderne comme React + Zustand. D’autres\r\n  patterns plus **conceptuels** (Builder, Strategy, Decorator) ont été illustrés\r\n  sous forme de **pseudo-code** afin de mieux saisir leur intention.\r\n\u003C/p>\r\n\r\n### En bref :\r\n\r\n- Les patterns ne sont pas une contrainte, mais une **liberté maîtrisée**.\r\n- Ils vous permettent d’**éviter les pièges classiques** du développement à mesure que vos projets prennent de l’ampleur.\r\n- **Apprendre à reconnaître** et à utiliser ces modèles, c’est aussi progresser en **maturité logicielle**.\r\n\r\n\u003C/div>","src/data/blog/qu-est-ce-que-design-pattern.mdx","a6455e1f8281a540",["Map",49,50,18,54,38,59,64,65,21,70,75,76,81,82,87,88,40,93,98,99,104,105,110,111],"ben-holmes",{"id":49,"data":51,"filePath":52,"digest":53},{"name":49},"src/data/taxonomies/ben-holmes.json","c3bccad803421701",{"id":18,"data":55,"filePath":57,"digest":58},{"name":56},"Design architecture","src/data/taxonomies/architecture-design.json","08799596a8c6e694",{"id":38,"data":60,"filePath":62,"digest":63},{"name":61},"Bonnes pratiques / Clean code","src/data/taxonomies/bonnes-pratiques-clean-code.json","5eb248901f0855ad","durand-construction",{"id":64,"data":66,"filePath":68,"digest":69},{"name":67},"Durand-construction","src/data/taxonomies/durand-construction.json","efca6d7c0b5fda3d",{"id":21,"data":71,"filePath":73,"digest":74},{"name":72},"Design systems","src/data/taxonomies/design.json","2cbf2cbe6dd8265f","materiaux-techniques",{"id":75,"data":77,"filePath":79,"digest":80},{"name":78},"Matériaux & Techniques","src/data/taxonomies/materiaux-techniques.json","f3847ea534c67580","durabilite-innovation",{"id":81,"data":83,"filePath":85,"digest":86},{"name":84},"Durabilité & Innovation","src/data/taxonomies/durabilite-innovation.json","5962e1e6ed0984ab","pedagogie-conseils",{"id":87,"data":89,"filePath":91,"digest":92},{"name":90},"Pédagogie & Conseils","src/data/taxonomies/pedagogie-conseils.json","49ad060853fa0c84",{"id":40,"data":94,"filePath":96,"digest":97},{"name":95},"Programmation","src/data/taxonomies/programmation.json","04499f26ce00c5d9","projets-realisations",{"id":98,"data":100,"filePath":102,"digest":103},{"name":101},"Projets & Réalisations","src/data/taxonomies/projets-realisations.json","d67938c946fb30b6","vie-du-cabinet",{"id":104,"data":106,"filePath":108,"digest":109},{"name":107},"Vie du cabinet","src/data/taxonomies/vie-du-cabinet.json","929a1ab1453fb827","reflexions-vision",{"id":110,"data":112,"filePath":114,"digest":115},{"name":113},"Réflexions & Vision","src/data/taxonomies/reflexions-vision.json","4e5fca4348227ded",["Map",49,117,64,121,26,125],{"id":49,"data":118,"filePath":120,"digest":53},{"name":49,"portfolio":119},"https://ben_holmes.com","src/data/authors/ben-holmes.json",{"id":64,"data":122,"filePath":124,"digest":69},{"name":67,"portfolio":123},"https://durand-construction.com","src/data/authors/durand-construction.json",{"id":26,"data":126,"filePath":128,"digest":129},{"name":26,"portfolio":127},"https://elyseemb.github.io/","src/data/authors/emmanuelito.json","3f2fc29724f92dab"]